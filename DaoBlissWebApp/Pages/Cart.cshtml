@page
@model DaoBlissWebApp.Pages.CartModel
@{
    ViewData["Title"] = "Giỏ hàng";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="min-h-screen bg-gray-50">
    <div class="px-4 py-6">
        <form method="post" id="orderForm">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-lg p-6 mb-6">
                        <h2 class="text-lg font-semibold mb-4">Thông tin nhận hàng</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <input type="text" asp-for="ShippingFullName" placeholder="Họ tên" required
                                       class="px-4 py-3 border border-gray-200 rounded text-sm outline-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent w-full">
                                <span asp-validation-for="ShippingFullName" class="text-red-500 text-xs"></span>
                            </div>

                            <div>
                                <input type="text" asp-for="ShippingPhoneNumber" placeholder="Số điện thoại" required
                                       class="px-4 py-3 border border-gray-200 rounded text-sm outline-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent w-full">
                                <span asp-validation-for="ShippingPhoneNumber" class="text-red-500 text-xs"></span>
                            </div>

                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <input type="email" asp-for="ShippingEmail" placeholder="Email để nhận thông tin đơn hàng" required
                                       class="px-4 py-3 border border-gray-200 rounded text-sm outline-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent w-full">
                                <span asp-validation-for="ShippingEmail" class="text-red-500 text-xs"></span>
                            </div>

                            <div>
                                <input type="text" asp-for="ShippingAddress" placeholder="Địa chỉ (Ví dụ: 123 Hoàng Cầu)" required
                                       class="px-4 py-3 border border-gray-200 rounded text-sm outline-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent w-full">
                                <span asp-validation-for="ShippingAddress" class="text-red-500 text-xs"></span>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                            <div class="relative" id="province-wrapper">
                                <button type="button" id="province-button" class="w-full px-4 py-3 border border-gray-200 rounded text-sm outline-none focus:border-primary bg-white text-left flex items-center justify-between" aria-haspopup="listbox">
                                    <span id="province-selected">Tỉnh/Thành phố</span>
                                    <i class="ri-arrow-down-s-line"></i>
                                </button>
                                <div id="province-dropdown" class="hidden absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg">
                                    <div class="p-2 border-b border-gray-100">
                                        <div class="relative">
                                            <input type="text" id="province-search" class="w-full px-3 py-2 pl-8 border border-gray-200 rounded text-sm" placeholder="Tìm kiếm...">
                                        </div>
                                    </div>
                                    <div class="max-h-60 overflow-y-auto py-1">
                                        <ul id="province-options" class="text-sm" role="listbox"></ul>
                                    </div>
                                </div>
                                <select id="province" class="hidden">
                                    <option value="">Tỉnh/Thành phố</option>
                                </select>
                                <input type="hidden" asp-for="ShippingCity" id="province-name" />
                                <span asp-validation-for="ShippingCity" class="text-red-500 text-xs"></span>
                            </div>
                            <div class="relative" id="district-wrapper">
                                <button type="button" id="district-button" class="w-full px-4 py-3 border border-gray-200 rounded text-sm outline-none focus:border-primary bg-white text-left flex items-center justify-between" aria-haspopup="listbox">
                                    <span id="district-selected">Quận/Huyện</span>
                                    <i class="ri-arrow-down-s-line"></i>
                                </button>
                                <div id="district-dropdown" class="hidden absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg">
                                    <div class="p-2 border-b border-gray-100">
                                        <div class="relative">
                                            <input type="text" id="district-search" class="w-full px-3 py-2 pl-8 border border-gray-200 rounded text-sm" placeholder="Tìm kiếm...">
                                        </div>
                                    </div>
                                    <div class="max-h-60 overflow-y-auto py-1">
                                        <ul id="district-options" class="text-sm" role="listbox"></ul>
                                    </div>
                                </div>
                                <select id="district" class="hidden">
                                    <option value="">Quận/Huyện</option>
                                </select>
                                <input type="hidden" asp-for="ShippingDistrict" id="district-name" />
                                <span asp-validation-for="ShippingDistrict" class="text-red-500 text-xs"></span>
                            </div>
                            <div class="relative" id="ward-wrapper">
                                <button type="button" id="ward-button" class="w-full px-4 py-3 border border-gray-200 rounded text-sm outline-none focus:border-primary bg-white text-left flex items-center justify-between" aria-haspopup="listbox">
                                    <span id="ward-selected">Phường/Xã</span>
                                    <i class="ri-arrow-down-s-line"></i>
                                </button>
                                <div id="ward-dropdown" class="hidden absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg">
                                    <div class="p-2 border-b border-gray-100">
                                        <div class="relative">
                                            <input type="text" id="ward-search" class="w-full px-3 py-2 pl-8 border border-gray-200 rounded text-sm" placeholder="Tìm kiếm...">
                                        </div>
                                    </div>
                                    <div class="max-h-60 overflow-y-auto py-1">
                                        <ul id="ward-options" class="text-sm" role="listbox"></ul>
                                    </div>
                                </div>
                                <select id="ward" class="hidden">
                                    <option value="">Phường/Xã</option>
                                </select>
                                <input type="hidden" asp-for="ShippingWard" id="ward-name" />
                                <span asp-validation-for="ShippingWard" class="text-red-500 text-xs"></span>
                            </div>
                        </div>
                        <textarea asp-for="Note" placeholder="Ghi chú thêm (Ví dụ: Giao giờ hành chính)"
                                  class="w-full px-4 py-3 border border-gray-200 rounded text-sm outline-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" rows="3"></textarea>
                        <span asp-validation-for="Note" class="text-red-500 text-xs"></span>
                    </div>
                    <div class="bg-white rounded-lg p-6">
                        <h2 class="text-lg font-semibold mb-4">Chọn hình thức thanh toán</h2>
                        <div class="flex flex-col gap-3">
                            <input type="hidden" id="PaymentMethod" name="PaymentMethod">
                            <label class="flex items-center gap-3 p-3 border border-gray-200 rounded cursor-pointer hover:border-primary">
                                <input type="radio" name="paymentOption" value="COD" class="hidden peer" checked onclick="document.getElementById('PaymentMethod').value = this.value" />
                                <div class="w-5 h-5 border-2 border-gray-300 rounded-full peer-checked:border-primary peer-checked:bg-primary flex items-center justify-center">
                                    <div class="w-2 h-2 bg-white rounded-full hidden peer-checked:block"></div>
                                </div>
                                <div class="flex items-center gap-3">
                                    <div class="w-8 h-8 flex items-center justify-center bg-orange-100 rounded">
                                        <i class="ri-truck-line text-orange-600"></i>
                                    </div>
                                    <span class="text-sm font-medium">Thanh toán khi nhận hàng (COD)</span>
                                </div>
                            </label>
                            @*<label class="flex items-center gap-3 p-3 border border-gray-200 rounded cursor-pointer hover:border-primary">
                                <input type="radio" name="paymentOption" value="QR" class="hidden peer" onclick="document.getElementById('PaymentMethod').value = this.value" />
                                <div class="w-5 h-5 border-2 border-gray-300 rounded-full peer-checked:border-primary peer-checked:bg-primary flex items-center justify-center">
                                    <div class="w-2 h-2 bg-white rounded-full hidden peer-checked:block"></div>
                                </div>
                                <div class="flex items-center gap-3">
                                    <div class="w-8 h-8 flex items-center justify-center bg-orange-100 rounded">
                                        <i class="ri-qr-code-line text-orange-600"></i>
                                    </div>
                                    <span class="text-sm font-medium">Thanh toán trước bằng mã QR</span>
                                </div>
                            </label>*@
                        </div>
                    </div>
                </div>
                <div class="lg:col-span-1">
                    <div class="bg-white rounded-lg p-6 sticky top-6">
                        <h2 class="text-lg font-semibold mb-4">Giỏ hàng của bạn</h2>
                        <div class="space-y-4 mb-6  cart-list">

                        </div>
                        <div class="bg-green-50 border border-green-200 rounded p-3 mb-4">
                            <div class="flex items-center gap-2 mb-2">
                                <div class="w-4 h-4 flex items-center justify-center">
                                    <i class="ri-gift-line text-green-600"></i>
                                </div>
                                <span class="text-sm font-medium">Chương trình khuyến mãi</span>
                            </div>
                            <div class="mt-2">
                                <input type="text" asp-for="PromoCode" id="promotion" placeholder="Nhập mã giảm giá" class="w-full px-3 py-2 border border-green-200 rounded text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
                                <span asp-validation-for="PromoCode" class="text-red-500 text-xs"></span>
                                <button type="button" id="apply-promo" class="w-full mt-2 bg-orange-500 text-white  hover:bg-orange-600 transition-colors py-2 rounded text-sm font-medium whitespace-nowrap rounded">Áp dụng</button>
                            </div>
                        </div>
                        <div class="space-y-3 mb-6">
                            <div class="flex justify-between text-sm">
                                <span>Tổng giá trị đơn:</span>
                                <span id="cartTotal"></span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span>Phí giao hàng:</span>
                                <span id="shippingFee">25.000đ</span>
                            </div>
                            <div class="flex justify-between text-sm text-red-600">
                                <span>Giảm giá:</span>
                                <span id="discount">- 0đ</span>
                            </div>
                            <hr>
                            <div class="flex justify-between text-lg font-semibold">
                                <span>Tổng thanh toán:</span>
                                <span id="totalPayment" class="text-secondary">290.000đ</span>
                            </div>
                        </div>
                        <button type="submit" id="submit-order" asp-page-handler="CreateOrder" class="w-full bg-orange-500 text-white py-3 rounded font-medium hover:bg-orange-600 transition-colors whitespace-nowrap !ounded flex items-center justify-center gap-2">
                            <span class="button-text">Xác nhận đặt hàng</span>
                            <svg class="animate-spin h-5 w-5 text-white hidden" id="spinner" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8h-8z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<form id="purchaseForm" method="post" action="/PurchaseSuccess">
    <input type="hidden" name="orderNumber" id="orderNumberInput" />
</form>

<script>
    document.getElementById("orderNumberInput").value = data.orderNumber;
    document.getElementById("purchaseForm").submit();
</script>

<script id="address-api">
    document.addEventListener('DOMContentLoaded', function () {
        const provinceSelect = document.getElementById('province');
        const provinceButton = document.getElementById('province-button');
        const provinceDropdown = document.getElementById('province-dropdown');
        const provinceOptions = document.getElementById('province-options');
        const provinceSearch = document.getElementById('province-search');
        const provinceSelected = document.getElementById('province-selected');
        const provinceNameInput = document.getElementById('province-name');

        const districtSelect = document.getElementById('district');
        const districtButton = document.getElementById('district-button');
        const districtDropdown = document.getElementById('district-dropdown');
        const districtOptions = document.getElementById('district-options');
        const districtSearch = document.getElementById('district-search');
        const districtSelected = document.getElementById('district-selected');
        const districtNameInput = document.getElementById('district-name');

        const wardSelect = document.getElementById('ward');
        const wardButton = document.getElementById('ward-button');
        const wardDropdown = document.getElementById('ward-dropdown');
        const wardOptions = document.getElementById('ward-options');
        const wardSearch = document.getElementById('ward-search');
        const wardSelected = document.getElementById('ward-selected');
        const wardNameInput = document.getElementById('ward-name');

        const cartContainer = document.querySelector(".cart-list");
        const cartTotalEl = document.getElementById("cartTotal");
        const shippingFeeEl = document.getElementById("shippingFee");
        const discountEl = document.getElementById("discount");
        const totalPaymentEl = document.getElementById("totalPayment");
        const orderForm = document.getElementById("orderForm");
        const applyPromoButton = document.getElementById("apply-promo");

        let provinces = [];
        let districts = [];
        let wards = [];

        function renderOptions(data, listContainer, selectEl, selectedEl, nameInput, dropdownEl, nextLoader = null, resetNext = null) {
            listContainer.innerHTML = '';
            selectEl.innerHTML = `<option value="">Chọn...</option>`;

            data.forEach(item => {
                let value = item.WardCode || item.DistrictID || item.ProvinceID;
                let name = item.WardName || item.DistrictName || item.ProvinceName;

                const option = document.createElement('option');
                option.value = value;
                option.textContent = name;
                selectEl.appendChild(option);

                const li = document.createElement('li');
                li.className = 'px-3 py-2 hover:bg-gray-50 cursor-pointer';
                li.textContent = name;
                li.setAttribute('data-value', value);

                li.addEventListener('click', () => {
                    selectedEl.textContent = name;
                    nameInput.value = name;
                    selectEl.value = value;
                    dropdownEl.classList.add('hidden');
                    selectEl.dispatchEvent(new Event("change"));
                    if (resetNext) resetNext();
                    if (nextLoader) nextLoader(value);
                });

                listContainer.appendChild(li);
            });
        }

        async function loadProvinces() {
            try {
                const response = await fetch(`/Cart?handler=Provinces`, {
                    method: "GET",
                    headers: {
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });
                const data = await response.json();
                provinces = data.data || [];
                renderOptions(provinces, provinceOptions, provinceSelect, provinceSelected, provinceNameInput, provinceDropdown, loadDistricts, resetDistrictAndWard);
            } catch (error) {
                console.error("Error loading provinces:", error);
            }
        }

        async function loadDistricts(provinceId) {
            try {
                const response = await fetch(`/Cart?handler=Districts&province_id=${parseInt(provinceId)}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });
                const data = await response.json();
                districts = data.data || [];
                renderOptions(districts, districtOptions, districtSelect, districtSelected, districtNameInput, districtDropdown, loadWards, resetWard);
            } catch (error) {
                console.error("Error loading districts:", error);
            }
        }

        async function loadWards(districtId) {
            try {
                const response = await fetch(`/Cart?handler=Wards&district_id=${parseInt(districtId)}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const data = await response.json();
                if (data.code !== 200) throw new Error(data.message || "Failed to fetch wards");
                wards = data.data || [];
                renderOptions(wards, wardOptions, wardSelect, wardSelected, wardNameInput, wardDropdown);
            } catch (error) {
                console.error("Error loading wards:", error);
                wardOptions.innerHTML = '';
                wardSelect.innerHTML = '<option value="">Phường/Xã</option>';
                wardSelected.textContent = "Phường/Xã";
                wardNameInput.value = '';
            }
        }

        function resetDistrictAndWard() {
            districts = [];
            wards = [];
            districtSelected.textContent = "Quận/Huyện";
            districtNameInput.value = '';
            wardSelected.textContent = "Phường/Xã";
            wardNameInput.value = '';
            districtSelect.innerHTML = '<option value="">Quận/Huyện</option>';
            wardSelect.innerHTML = '<option value="">Phường/Xã</option>';
            districtOptions.innerHTML = '';
            wardOptions.innerHTML = '';
        }

        function resetWard() {
            wards = [];
            wardSelected.textContent = "Phường/Xã";
            wardNameInput.value = '';
            wardSelect.innerHTML = '<option value="">Phường/Xã</option>';
            wardOptions.innerHTML = '';
        }

        provinceSearch.addEventListener('input', (e) => {
            const q = e.target.value.trim().toLowerCase();
            const filtered = provinces.filter(p => (p.ProvinceName || "").toLowerCase().includes(q));
            renderOptions(filtered, provinceOptions, provinceSelect, provinceSelected, provinceNameInput, provinceDropdown, loadDistricts, resetDistrictAndWard);
        });

        districtSearch.addEventListener('input', (e) => {
            const q = e.target.value.trim().toLowerCase();
            const filteredDistricts = districts.filter(d => (d.DistrictName || "").toLowerCase().includes(q));
            renderOptions(filteredDistricts, districtOptions, districtSelect, districtSelected, districtNameInput, districtDropdown, loadWards, resetWard);
        });

        wardSearch.addEventListener('input', (e) => {
            const q = e.target.value.trim().toLowerCase();
            const filteredWards = wards.filter(w => (w.WardName || "").toLowerCase().includes(q));
            renderOptions(filteredWards, wardOptions, wardSelect, wardSelected, wardNameInput, wardDropdown);
        });

        provinceButton.addEventListener('click', () => {
            provinceDropdown.classList.toggle('hidden');
            provinceSearch.value = '';
            renderOptions(provinces, provinceOptions, provinceSelect, provinceSelected, provinceNameInput, provinceDropdown, loadDistricts, resetDistrictAndWard);
        });

        districtButton.addEventListener('click', () => {
            districtDropdown.classList.toggle('hidden');
            districtSearch.value = '';
            renderOptions(districts, districtOptions, districtSelect, districtSelected, districtNameInput, districtDropdown, loadWards, resetWard);
        });

        wardButton.addEventListener('click', () => {
            wardDropdown.classList.toggle('hidden');
            wardSearch.value = '';
            renderOptions(wards, wardOptions, wardSelect, wardSelected, wardNameInput, wardDropdown);
        });

        document.addEventListener('click', (e) => {
            if (!e.target.closest('#province-wrapper')) provinceDropdown.classList.add('hidden');
            if (!e.target.closest('#district-wrapper')) districtDropdown.classList.add('hidden');
            if (!e.target.closest('#ward-wrapper')) wardDropdown.classList.add('hidden');
        });

        loadProvinces();
        function loadCart() {
            return JSON.parse(localStorage.getItem("cart")) || [];
        }

        function saveCart(cart) {
            localStorage.setItem("cart", JSON.stringify(cart));
        }

        function updateCartCount() {
            const cart = loadCart();
            const total = cart.reduce((sum, i) => sum + i.quantity, 0);
            const cartCount = document.querySelector(".cart-count");
            if (cartCount) cartCount.textContent = total;
        }

        async function fetchVariantDetails(variantIds) {
            try {
                const response = await fetch('/Cart?handler=GetVariants', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ variantIds })
                });
                const data = await response.json();
                return data.variants || [];
            } catch (error) {
                console.error('Error fetching variant details:', error);
                return [];
            }
        }

        async function renderSummary() {
            const cart = loadCart();
            const details = await fetchVariantDetails(cart.map(i => i.variantId));
            updatePriceSummary(cart, details);
        }

        function updatePriceSummary(cart, variants) {
            const cartTotal = cart.reduce((sum, item) => {
                const variant = variants.find(v => String(v.variantId) === String(item.variantId)) || {};
                return sum + (variant.price || 265000) * item.quantity;
            }, 0);

            const shippingFeeText = shippingFeeEl.textContent.replace(/[^0-9]/g, '');
            const shippingFee = parseInt(shippingFeeText) || 25000;
            const discountText = discountEl.textContent.replace(/[^0-9]/g, '');
            const discount = parseInt(discountText) || 0;

            const totalPayment = cartTotal + shippingFee - discount;

            cartTotalEl.textContent = cartTotal.toLocaleString('vi-VN') + 'đ';
            totalPaymentEl.textContent = totalPayment.toLocaleString('vi-VN') + 'đ';
        }

        async function renderCart() {
            const cart = loadCart();
            if (!cart.length) {
                cartContainer.innerHTML = '<p class="text-center text-gray-500">Giỏ hàng trống</p>';
                updateCartCount();
                return;
            }

            const variantIds = cart.map(item => item.variantId);
            const variants = await fetchVariantDetails(variantIds);

            cartContainer.innerHTML = "";
            cart.forEach(item => {
                const variant = variants.find(v => String(v.variantId) === String(item.variantId)) || {};
                const itemEl = document.createElement("div");
                itemEl.className = "cart-item flex items-center gap-4 p-3 border border-gray-100 rounded";
                itemEl.dataset.variantId = item.variantId;
                itemEl.dataset.productId = item.productId || "";
                itemEl.innerHTML = `
            <img src="${variant.imageUrl || 'https://readdy.ai/api/search-image?query=serum%20vitamin%20c%20skincare%20bottle%20with%20dropper%20on%20clean%20white%20background%2C%20minimalist%20product%20photography%2C%20bright%20lighting&width=80&height=80&seq=1&orientation=squarish'}" alt="${variant.productName || 'Sản phẩm'}" class="w-16 h-16 object-cover rounded">
            <div class="flex-1">
                <h3 class="text-sm font-medium mb-1">${variant.productName || 'Serum Tơ Tằm Cấp Ẩm Đa Tầng'}</h3>
                <p class="text-xs text-gray-500 mb-2">${variant.variantName || '30ml'}</p>
                <div class="flex items-center justify-between">
                    <div class="flex items-center gap-2">
                        <button type="button" class="decrease w-6 h-6 flex items-center justify-center border border-gray-300 rounded text-sm hover:border-green-500">-</button>
                        <span class="text-sm quantity">${item.quantity}</span>
                        <button type="button" class="increase w-6 h-6 flex items-center justify-center border border-gray-300 rounded text-sm hover:border-green-500">+</button>
                    </div>
                    <span class="text-sm font-semibold text-orange-500">${(variant.price || 265000).toLocaleString('vi-VN')}đ</span>
                </div>
            </div>
            <button type="button" class="remove w-6 h-6 flex items-center justify-center text-gray-400 hover:text-red-500">
                <i class="ri-close-line"></i>
            </button>
        `;
                cartContainer.appendChild(itemEl);
            });
            updateCartCount();
            renderSummary();
        }

        cartContainer.addEventListener("click", function (e) {
            const decreaseBtn = e.target.closest(".decrease");
            const increaseBtn = e.target.closest(".increase");
            const removeBtn = e.target.closest(".remove");

            if (!(decreaseBtn || increaseBtn || removeBtn)) return;

            const itemEl = e.target.closest(".cart-item");
            if (!itemEl) return;

            const variantId = itemEl.dataset.variantId;
            let cart = loadCart();
            let item = cart.find(i => String(i.variantId) === String(variantId));

            if (!item) return;

            if (decreaseBtn) {
                if (item.quantity > 1) {
                    item.quantity -= 1;
                    itemEl.querySelector(".quantity").textContent = item.quantity;
                    saveCart(cart);
                    updateCartCount();
                    renderSummary();
                }
            }

            if (increaseBtn) {
                if (item.quantity < 5) {
                    item.quantity += 1;
                    itemEl.querySelector(".quantity").textContent = item.quantity;
                    saveCart(cart);
                    updateCartCount();
                    renderSummary();
                } else {
                    Swal.fire({
                        icon: "info",
                        title: "Thông báo",
                        text: "Nếu bạn muốn mua hàng với số lượng lớn, xin vui lòng liên hệ hotline: 034 356 4378. Có mức chiết khấu thành cơ bản!",
                    });
                }
            }

            if (removeBtn) {
                Swal.fire({
                    title: "Xác nhận xoá?",
                    text: "Bạn có chắc chắn muốn xoá sản phẩm này khỏi giỏ hàng không?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#d33",
                    cancelButtonColor: "#3085d6",
                    confirmButtonText: "Xoá",
                    cancelButtonText: "Huỷ"
                }).then((result) => {
                    if (result.isConfirmed) {
                        cart = cart.filter(i => String(i.variantId) !== String(variantId));
                        itemEl.remove();
                        saveCart(cart);
                        updateCartCount();
                        renderSummary();
                        Swal.fire({
                            title: "Đã xoá!",
                            text: "Sản phẩm đã được xoá khỏi giỏ hàng.",
                            icon: "success",
                            timer: 1500,
                            showConfirmButton: false
                        });
                    }
                });
            }
        });

        wardSelect.addEventListener("change", async function () {
            const districtId = document.getElementById("district").value;
            const wardCode = this.value;
            const cart = loadCart();

            const response = await fetch("/Cart?handler=CalculateShipping", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    districtId: parseInt(districtId),
                    wardCode: wardCode,
                    provinceName: provinceSelected.textContent,
                    districtName: districtSelected.textContent,
                    wardName: wardSelected.textContent,
                    cart: cart
                })
            });

            const data = await response.json();
            if (data.error) {
                Swal.fire({
                    icon: "error",
                    title: "Lỗi",
                    text: "Lỗi tính phí: " + data.error,
                });
            } else {
                shippingFeeEl.textContent = data.shippingFee.toLocaleString('vi-VN') + 'đ';
                await renderSummary();
            }
        });

        applyPromoButton.addEventListener("click", async function () {
            const promoCode = document.getElementById("promotion").value.trim();
            if (!promoCode) {
                Swal.fire({
                    icon: "error",
                    title: "Lỗi",
                    text: "Vui lòng nhập mã khuyến mãi.",
                });
                return;
            }

            try {
                const response = await fetch('/Cart?handler=ApplyPromo', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ promoCode })
                });
                const data = await response.json();
                if (data.error) {
                    Swal.fire({
                        icon: "error",
                        title: "Lỗi",
                        text: data.error,
                    });
                } else {
                    discountEl.textContent = `-${data.discount.toLocaleString('vi-VN')}đ`;
                    await renderSummary();
                    Swal.fire({
                        icon: "success",
                        title: "Thành công",
                        text: "Mã khuyến mãi đã được áp dụng.",
                    });
                }
            } catch (error) {
                console.error('Error applying promo:', error);
                Swal.fire({
                    icon: "error",
                    title: "Lỗi",
                    text: "Đã xảy ra lỗi khi áp dụng mã khuyến mãi.",
                });
            }
        });

        orderForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            const submitButton = orderForm.querySelector('button[type="submit"]');
            const buttonText = submitButton.querySelector('.button-text');
            const spinner = submitButton.querySelector('#spinner');
            submitButton.disabled = true;
            buttonText.classList.add('hidden');
            spinner.classList.remove('hidden');

            const cart = loadCart();
            if (!cart.length) {
                Swal.fire({
                    icon: "error",
                    title: "Giỏ hàng trống",
                    text: "Vui lòng thêm sản phẩm vào giỏ hàng trước khi đặt hàng.",
                });
                submitButton.disabled = false;
                buttonText.classList.remove('hidden');
                spinner.classList.add('hidden');
                return;
            }

            const formData = new FormData(orderForm);
            cart.forEach((item, index) => {
                formData.append(`Cart[${index}].ProductId`, item.productId);
                formData.append(`Cart[${index}].VariantId`, item.variantId);
                formData.append(`Cart[${index}].Quantity`, item.quantity);
            });
            formData.append('ShippingCityName', provinceSelected.textContent);
            formData.append('ShippingDistrictName', districtSelected.textContent);
            formData.append('ShippingWardName', wardSelected.textContent);
            const shippingFeeText = shippingFeeEl.textContent.replace(/[^0-9]/g, '');
            const shippingFee = parseInt(shippingFeeText) || 25000;
            const discountText = discountEl.textContent.replace(/[^0-9]/g, '');
            const discount = parseInt(discountText) || 0;
            formData.append("ShippingFee", shippingFee.toString());
            formData.append("Discount", discount.toString());

            try {
                const response = await fetch('/Cart?handler=CreateOrder', {
                    method: 'POST',
                    headers: {
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                });

                const data = await response.json();
                if (data.error) {
                    Swal.fire({
                        icon: "error",
                        title: "Lỗi",
                        text: data.error,
                    });
                } else {
                    localStorage.removeItem("cart");
                    await renderCart();
                    const params = new URLSearchParams({
                        orderNumber: data.orderNumber
                    });
                    window.location.href = `/PurchaseSuccess?${params.toString()}`;
                }
            } catch (error) {
                console.error('Error creating order:', error);
                Swal.fire({
                    icon: "error",
                    title: "Lỗi",
                    text: "Đã xảy ra lỗi khi đặt hàng. Vui lòng thử lại.",
                });
            } finally {
                submitButton.disabled = false;
                buttonText.classList.remove('hidden');
                spinner.classList.add('hidden');
            }
        });

        renderCart();
    });
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
